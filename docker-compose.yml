version: '3.8'

services:
  timescaledb:
    image: timescale/timescaledb-ha:pg15-ts2.20-all  # Official latest stable with toolkit support
    container_name: iot-timescaledb
    restart: unless-stopped
    environment:
      POSTGRES_DB: iot_system
      POSTGRES_USER: iot_user
      POSTGRES_PASSWORD: iot_password
      POSTGRES_HOST_AUTH_METHOD: trust
      TIMESCALEDB_TELEMETRY: 'off'
    ports:
      - "5432:5432"
    volumes:
      - timescale_data:/var/lib/postgresql/data
      - ./docker/init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U iot_user -d iot_system"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - iot-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.3
    container_name: iot-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - iot-network

  kafka:
    image: confluentinc/cp-kafka:7.4.3
    container_name: iot-kafka
    restart: unless-stopped
    depends_on:
      timescaledb:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - iot-network

volumes:
  timescale_data:

networks:
  iot-network:
    driver: bridge
